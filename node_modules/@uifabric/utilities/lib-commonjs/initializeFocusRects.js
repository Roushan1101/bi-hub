"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var getWindow_1 = require("./dom/getWindow");
var keyboard_1 = require("./keyboard");
var setFocusVisibility_1 = require("./setFocusVisibility");
var setFocusVisibility_2 = require("./setFocusVisibility");
exports.IsFocusVisibleClassName = setFocusVisibility_2.IsFocusVisibleClassName;
/**
 * Initializes the logic which:
 *
 * 1. Subscribes keydown and mousedown events. (It will only do it once per window,
 *    so it's safe to call this method multiple times.)
 * 2. When the user presses directional keyboard keys, adds the 'ms-Fabric--isFocusVisible' classname
 *    to the document body, removes the 'ms-Fabric-isFocusHidden' classname.
 * 3. When the user clicks a mouse button, adds the 'ms-Fabric-isFocusHidden' classname to the
 *    document body, removes the 'ms-Fabric--isFocusVisible' classname.
 *
 * This logic allows components on the page to conditionally render focus treatments based on
 * the existence of global classnames, which simplifies logic overall.
 *
 * @param window - the window used to add the event listeners
 */
function initializeFocusRects(window) {
    var win = (window || getWindow_1.getWindow());
    if (win && !win.__hasInitializeFocusRects__) {
        win.__hasInitializeFocusRects__ = true;
        win.addEventListener('mousedown', _onMouseDown, true);
        win.addEventListener('keydown', _onKeyDown, true);
    }
}
exports.initializeFocusRects = initializeFocusRects;
function _onMouseDown(ev) {
    setFocusVisibility_1.setFocusVisibility(false, ev.target);
}
function _onKeyDown(ev) {
    keyboard_1.isDirectionalKeyCode(ev.which) && setFocusVisibility_1.setFocusVisibility(true, ev.target);
}
//# sourceMappingURL=initializeFocusRects.js.map