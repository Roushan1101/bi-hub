"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.validateConfig = exports.createConfig = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _powerbiClient = _interopRequireWildcard(require("powerbi-client"));

var _utils = require("./utils");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var createConfig = function createConfig(props) {
  if (props) {
    var embedType = props.embedType,
        tokenType = props.tokenType,
        accessToken = props.accessToken,
        embedUrl = props.embedUrl,
        embedId = props.embedId,
        permissions = props.permissions,
        pageName = props.pageName,
        extraSettings = props.extraSettings,
        dashboardId = props.dashboardId,
        datasetId = props.datasetId,
        reportMode = props.reportMode;

    if (reportMode === 'create') {
      return (0, _utils.clean)({
        tokenType: _powerbiClient.models.TokenType[tokenType],
        accessToken: accessToken,
        embedUrl: embedUrl,
        datasetId: datasetId,
        reportMode: reportMode
      });
    }

    return (0, _utils.clean)({
      type: embedType,
      tokenType: _powerbiClient.models.TokenType[tokenType],
      accessToken: accessToken,
      embedUrl: embedUrl,
      id: embedId,
      pageName: pageName,
      dashboardId: dashboardId,
      permissions: _powerbiClient.models.Permissions[permissions],
      settings: _objectSpread({
        filterPaneEnabled: true,
        navContentPaneEnabled: true
      }, extraSettings),
      datasetId: datasetId,
      reportMode: reportMode
    });
  }

  return null;
};

exports.createConfig = createConfig;

var validateTypeConfig = function validateTypeConfig(config) {
  switch (config.type) {
    case 'report':
      return _powerbiClient["default"].models.validateReportLoad(config);

    case 'dashboard':
      return _powerbiClient["default"].models.validateDashboardLoad(config);

    case 'tile':
      return _powerbiClient["default"].models.validateTileLoad(config);

    default:
      throw 'Unknown config type allowed types are report, dashboard or tile';
  }
};

var validateCreateReportConfig = function validateCreateReportConfig(config) {
  if (!config.embedUrl) return 'Embed URL is required';
  return _powerbiClient["default"].models.validateCreateReport(config);
};

var validateConfig = function validateConfig(config) {
  var isCreateMode = config.reportMode === 'create';
  return isCreateMode ? validateCreateReportConfig(config) : validateTypeConfig(config);
};

exports.validateConfig = validateConfig;