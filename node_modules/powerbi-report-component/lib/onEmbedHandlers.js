"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.tileHandler = exports.dashboardHandler = exports.reportHandler = void 0;

var _utils = require("./utils");

var reportHandler = function reportHandler(report, reportMode, props) {
  var isCreateMode = reportMode === 'create';
  report.on('loaded', function () {
    if ((0, _utils.validateMode)(reportMode) && reportMode !== "view") {
      report.switchMode(reportMode);
    }

    (0, _utils.validateAndInvokeCallback)(props.onLoad, report);
  });
  report.on('rendered', function () {
    return (0, _utils.validateAndInvokeCallback)(props.onRender, report);
  });
  report.on('error', function (event) {
    return (0, _utils.validateAndInvokeCallback)(props.onError, event.detail);
  });
  report.on('saved', function () {
    return (0, _utils.validateAndInvokeCallback)(props.onSave, report);
  });

  if (!isCreateMode) {
    report.on('dataSelected', function (event) {
      return (0, _utils.validateAndInvokeCallback)(props.onSelectData, event.detail);
    });
    report.on('pageChanged', function (event) {
      return (0, _utils.validateAndInvokeCallback)(props.onPageChange, event.detail);
    });
    report.on('buttonClicked', function (event) {
      return (0, _utils.validateAndInvokeCallback)(props.onButtonClicked, event.detail);
    });
    report.on('filtersApplied', function (event) {
      return (0, _utils.validateAndInvokeCallback)(props.onFiltersApplied, event.detail);
    });
    report.on('commandTriggered', function (event) {
      return (0, _utils.validateAndInvokeCallback)(props.onCommandTriggered, event.detail);
    });
  }
};

exports.reportHandler = reportHandler;

var dashboardHandler = function dashboardHandler(report, reportRef, props) {
  if (props.onLoad) props.onLoad(report, powerbi.get(reportRef));
  report.on('tileClicked', function (event) {
    return (0, _utils.validateAndInvokeCallback)(props.onTileClicked, event.detail);
  });
};

exports.dashboardHandler = dashboardHandler;

var tileHandler = function tileHandler(report, props) {
  report.on("tileLoaded", function (event) {
    return (0, _utils.validateAndInvokeCallback)(props.onLoad, event.detail);
  });
  report.on('tileClicked', function (event) {
    return (0, _utils.validateAndInvokeCallback)(props.onTileClicked, event.detail);
  });
};

exports.tileHandler = tileHandler;