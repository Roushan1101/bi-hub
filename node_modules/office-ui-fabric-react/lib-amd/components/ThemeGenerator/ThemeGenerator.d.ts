import { IColor } from '../../utilities/color/interfaces';
import { IThemeSlotRule } from './IThemeSlotRule';
import { IThemeRules } from './IThemeRules';
export declare class ThemeGenerator {
    static setSlot(rule: IThemeSlotRule, color: string | IColor, isInverted?: boolean, isCustomization?: boolean, overwriteCustomColor?: boolean): void;
    static insureSlots(slotRules: IThemeRules, isInverted: boolean): void;
    static getThemeAsJson(slotRules: IThemeRules): any;
    static getThemeAsCode(slotRules: IThemeRules): any;
    /**
     * Gets code-formatted load theme blob, specifically for the new theme designer,
     * aka.ms/themedesigner. Shouldn't use loadTheme like the old theme designer since it's deprecated.
     * We want to use the theme object from createTheme and use the Customizations.applySettings API instead.
     */
    static getThemeAsCodeWithCreateTheme(slotRules: IThemeRules): any;
    static getThemeAsSass(slotRules: IThemeRules): any;
    static getThemeForPowerShell(slotRules: IThemeRules): any;
    private static _setSlot;
    private static _makeRemainingCode;
}
