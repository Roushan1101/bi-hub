'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; /*
                                                                                                                                                                                                                                                                   * Copyright 2018 Jeremy Wood
                                                                                                                                                                                                                                                                   *
                                                                                                                                                                                                                                                                   * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and
                                                                                                                                                                                                                                                                   * associated documentation files (the "Software"), to deal in the Software without restriction,
                                                                                                                                                                                                                                                                   * including without limitation the rights to use, copy, modify, merge, publish, distribute,
                                                                                                                                                                                                                                                                   * sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is
                                                                                                                                                                                                                                                                   * furnished to do so, subject to the following conditions:
                                                                                                                                                                                                                                                                   *
                                                                                                                                                                                                                                                                   * The above copyright notice and this permission notice shall be included in all copies or substantial
                                                                                                                                                                                                                                                                   * portions of the Software.
                                                                                                                                                                                                                                                                   */

/**
 * Merges two functions whose purposes are to create props objects. Any props of a function type
 * will be merged into a new function that calls both original functions. Any non-function props
 * in getAdditionalProps will take precedence over those in getBaseProps.
 *
 * @param getBaseProps the base props function to merge onto.
 * @param getAdditionalProps the props function to merge from.
 * @returns {function(...[*])} a new function that create a merged set of props.
 */


exports.default = function (getBaseProps, getAdditionalProps) {
  if (getBaseProps && !getAdditionalProps) {
    return getBaseProps;
  } else if (!getBaseProps && getAdditionalProps) {
    return getAdditionalProps;
  }
  return function () {
    return mergeObjects(getBaseProps.apply(undefined, arguments), getAdditionalProps.apply(undefined, arguments));
  };
};

exports.mergeFunctions = mergeFunctions;
;

function mergeObjects(obj1, obj2) {
  var obj3 = _extends({}, obj1, obj2);
  // Merge functions that are present in both objects
  Object.keys(obj3).forEach(function (key) {
    if (isFunction(obj3[key]) && obj1[key] && obj2[key]) {
      obj3[key] = mergeFunctions(obj1[key], obj2[key]);
    }
  });
  return obj3;
}

function isFunction(functionToCheck) {
  var getType = {};
  return functionToCheck && getType.toString.call(functionToCheck) === '[object Function]';
}

function mergeFunctions(func1, func2) {
  return function () {
    func1.apply(undefined, arguments);
    func2.apply(undefined, arguments);
  };
}